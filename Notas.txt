Día 6: crear escucha de JARVIS todo el tiempo por intervalo
Día 7: que JARVIS ejecute todos los comandos
Día 8: agregar buscador de palabras para lo que le ingrese a JARVIS
Día 9: que JARVIS ejecute comandos acorde a las palabras buscadas (con patron de busqueda)
Día 10: que JARVIS hable con cada ingreso de comando por voz
Día 11: hacer responsive la página entera.

keycodes:
179 = play/pausa;
176 = siguiente;
177 = atras/volver a empezar;
122 = pantalla completa;
181 = abrir reproductor;
93 = menu opciones;
115 = F4;
18 = Alt; (Alt+F4 cerrar todo);
17 = control;
16 = shift;
82 = r; (control + r = reload);
87 = w; (control + w = cierra ventana en vista);
84 = t; (control + t = nueva pestaña);
78 = n; (control + n = nueva ventana); (control+shift+n = ventana de incognito);
80 = p, (control + p = imprimir);
72 = h, (control + h = historial);
74 = j, (control + j = descargas);
70 = f; (control + f = buscar en página);
123 = F12 (consola);
68 = d; (control + d = guardar pagina en marcadores);
66 = b; (control + shift + b = mostrar barra de marcadores);
79 = o; (control + shift + o = abre todos los marcadores);
89 = y; (control + shift + y = traductor);
65 = a; (control + shift + a = selector de pestañas);
48 - 57 = 0 - 9; (control + num = selección de pestañas);


links de busqueda:
chrome = chrome://history/?q=
youtube = https://www.youtube.com/results?search_query=
google = https://www.google.com/search?q=
spotify = https://open.spotify.com/search/
tiktok = https://www.tiktok.com/search?q=
history.back() = retrocede página
history.forward() = adelanta páginas
location.reload() = recarga página

navegador pantalla completa (F11):
document.getElementsByTagName("body")[0].onclick= function(){
var el = document.documentElement;
var rfs = // for newer Webkit and Firefox
         el.requestFullScreen
         || el.webkitRequestFullScreen
         || el.mozRequestFullScreen
         || el.msRequestFullScreen
             ;
             if(typeof rfs!="undefined" && rfs){
                 rfs.call(el);
             } else if(typeof window.ActiveXObject!="undefined"){
             // for Internet Explorer
             var wscript = new ActiveXObject("WScript.Shell");
             if (wscript!=null) {
                 wscript.SendKeys("{F11}");
             }
             }
 }
// var h = new KeyboardEvent("keydown", {bubbles : true, cancelable : true, code: "KeyH", key : "h", 
//             keyCode: 72, shiftKey : true});
// var control = new KeyboardEvent("keydown", {isTrusted: true, bubbles : true, cancelable : true, code: "ControlLeft", ctrlKey: true,
//                key : "Control", keyCode: 17, shiftKey : true});
// console.log(h);console.log(control);

if(ing.includes('baja')==true){window.scrollByLines(10)};
if(ing.includes('baja más')==true){window.scrollByLines(30)};
if(ing.includes('sube')==true){window.scrollByLines(-10)};
if(ing.includes('sube más')==true){window.scrollByLines(-30)};
if(ing.includes('ve arriba')==true){window.scroll(0,0)};
if(ing.includes('atras')==true){window.history.back()};
if(ing.includes('vuelve adelante')==true){window.history.forward()};

for(var c = 0; c <= patronCerrar.length; c++){ ///////////cierra jarvis
               let cerrar = ing.includes(patronCerrar[c]);
               if (cerrar == true && ing.includes('ventana') == true){
                  window.close();
               }
            }
